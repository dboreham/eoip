
Signed-off-by: Boian Bonev <bbonev@ipacct.com>

--- linux-3.2.45/include/net/gre.h.orig	2013-05-17 03:22:37.204504375 +0300
+++ linux-3.2.45/include/net/gre.h	2013-05-17 14:52:40.516612537 +0300
@@ -7,6 +7,14 @@
 #define GREPROTO_PPTP		1
 #define GREPROTO_MAX		2
 
+/* handle protocols with non-standard GRE header by ids that do not overlap
+ * with possible standard GRE protocol versions (0x00 - 0x7f)
+ */
+#define GREPROTO_NONSTD_BASE		0x80
+#define GREPROTO_NONSTD_EOIP		(0 + GREPROTO_NONSTD_BASE)
+#define GREPROTO_NONSTD_MAX		(1 + GREPROTO_NONSTD_BASE)
+
+
 struct gre_protocol {
 	int  (*handler)(struct sk_buff *skb);
 	void (*err_handler)(struct sk_buff *skb, u32 info);
--- linux-3.2.45/net/ipv4/gre.c.orig	2013-05-17 03:22:22.772504339 +0300
+++ linux-3.2.45/net/ipv4/gre.c	2013-05-17 14:55:28.344612975 +0300
@@ -21,14 +21,19 @@
 #include <net/protocol.h>
 #include <net/gre.h>
 
+#define GREPROTO_CNT \
+		(GREPROTO_MAX + GREPROTO_NONSTD_MAX - GREPROTO_NONSTD_BASE)
 
-static const struct gre_protocol __rcu *gre_proto[GREPROTO_MAX] __read_mostly;
+static const struct gre_protocol __rcu *gre_proto[GREPROTO_CNT] __read_mostly;
 static DEFINE_SPINLOCK(gre_proto_lock);
 
 int gre_add_protocol(const struct gre_protocol *proto, u8 version)
 {
-	if (version >= GREPROTO_MAX)
-		goto err_out;
+	if (version >= GREPROTO_NONSTD_BASE && version < GREPROTO_NONSTD_MAX)
+		version -= GREPROTO_NONSTD_BASE - GREPROTO_MAX;
+	else
+		if (version >= GREPROTO_MAX)
+			goto err_out;
 
 	spin_lock(&gre_proto_lock);
 	if (gre_proto[version])
@@ -47,8 +52,11 @@ EXPORT_SYMBOL_GPL(gre_add_protocol);
 
 int gre_del_protocol(const struct gre_protocol *proto, u8 version)
 {
-	if (version >= GREPROTO_MAX)
-		goto err_out;
+	if (version >= GREPROTO_NONSTD_BASE && version < GREPROTO_NONSTD_MAX)
+		version -= GREPROTO_NONSTD_BASE - GREPROTO_MAX;
+	else
+		if (version >= GREPROTO_MAX)
+			goto err_out;
 
 	spin_lock(&gre_proto_lock);
 	if (rcu_dereference_protected(gre_proto[version],
@@ -72,12 +80,22 @@ static int gre_rcv(struct sk_buff *skb)
 	u8 ver;
 	int ret;
 
+	/* the standard GRE header is 12 octets; the EOIP header is 8
+	 * 4 octets long ethernet packet can not be valid
+	 */
 	if (!pskb_may_pull(skb, 12))
 		goto drop;
 
-	ver = skb->data[1]&0x7f;
-	if (ver >= GREPROTO_MAX)
-		goto drop;
+	/* check for custom EOIP header */
+	if (skb->data[0] == 0x20 && skb->data[1] == 0x01 &&
+			skb->data[2] == 0x64 && skb->data[3] == 0x00)
+		ver = GREPROTO_NONSTD_EOIP - GREPROTO_NONSTD_BASE
+				+ GREPROTO_MAX;
+	else {
+		ver = skb->data[1]&0x7f;
+		if (ver >= GREPROTO_MAX)
+			goto drop;
+	}
 
 	rcu_read_lock();
 	proto = rcu_dereference(gre_proto[ver]);
@@ -98,10 +116,19 @@ static void gre_err(struct sk_buff *skb,
 {
 	const struct gre_protocol *proto;
 	const struct iphdr *iph = (const struct iphdr *)skb->data;
-	u8 ver = skb->data[(iph->ihl<<2) + 1]&0x7f;
+	u8 ver;
 
-	if (ver >= GREPROTO_MAX)
-		return;
+	if (skb->data[(iph->ihl<<2) + 0] == 0x20 &&
+			skb->data[(iph->ihl<<2) + 1] == 0x01 &&
+			skb->data[(iph->ihl<<2) + 2] == 0x64 &&
+			skb->data[(iph->ihl<<2) + 3] == 0x00)
+		ver = GREPROTO_NONSTD_EOIP - GREPROTO_NONSTD_BASE
+				+ GREPROTO_MAX;
+	else {
+		ver = skb->data[(iph->ihl<<2) + 1]&0x7f;
+		if (ver >= GREPROTO_MAX)
+			return;
+	}
 
 	rcu_read_lock();
 	proto = rcu_dereference(gre_proto[ver]);
